package net.imglib2.paramaxflow;

import java.io.*;
import java.net.URL;
import java.util.Properties;

import com.jug.paramaxflow.gui.ParaMaxFlowPanel;
import com.jug.segmentation.ParaMaxFlow;

import ij.IJ;

/**
 * A helper to load the library generated by the nar-maven-plugin.
 *
 * @author Johannes Schindelin
 * @author moon
 */
public class NarHelper {

	/**
	 * Loads the library compiled by the nar-maven-plugin.
	 *
	 * @param clazz a class compiled into the same project as the library
	 * @param groupId the groupId of the project
	 * @param artifactId the artifactId of the project
	 */
	public static void loadLibrary(final Class<?> clazz, final String groupId, final String artifactId, final String version) {
		final String osName = System.getProperty("os.name").toLowerCase();

		String libPrefix = "lib";
		final String libSuffix;
		if (osName.startsWith("mac")) {
			libSuffix = ".jnilib";
		} else if (osName.startsWith("win")) {
			libPrefix = "";
			libSuffix = ".dll";
		} else {
			libSuffix = ".so";
		}

		final String propertiesPath = "/Labels.properties";
		final URL url = clazz.getResource(propertiesPath);
		IJ.log("url = " + url);

		try {
            final String libName = artifactId + "-" + version;
            final String aol = predictAOL();
			final String urlString = url.toString();
			final String libPath;
			if (urlString.startsWith("file:")) {
				String path = urlString.substring(5, urlString.length() - propertiesPath.length());
				//if (path.endsWith("/classes")) path = path.substring(0, path.length() - 8);
				libPath = path + "/" + libName + "-" + aol + "-jni/lib/" + aol + "/jni/" + libPrefix + libName + libSuffix;

                System.out.println(libPath);

			} else if (urlString.startsWith("jar:file:")) {
				int bang = urlString.indexOf("!/");
				if (bang < 0) {
					throw new UnsatisfiedLinkError("Unexpected URL: " + urlString);
				}
				String path = urlString.substring(9, bang);
				IJ.log("path = " + path);

                path = "/" + libName + "-" + aol + "-jni/lib/" + aol + "/jni/" + libPrefix + libName + libSuffix;
                IJ.log("path2 = " + path);
                IJ.log("path3 = " + libPrefix + libName + libSuffix);
                libPath = loadNative(libPrefix + libName + libSuffix, path);

				IJ.log("libPath = " + libPath);
			} else {
				throw new UnsatisfiedLinkError("Could not load native library: URL of .jar is " + urlString);
			}

			System.load(libPath);
		} catch (IOException e) {
			e.printStackTrace();
			throw new UnsatisfiedLinkError("Could not find native library");
		}
	}

    private static String predictAOL() throws IOException {
        final String osName = System.getProperty("os.name").toLowerCase();
        System.out.println(osName);
        final String archName = System.getProperty("os.arch").toLowerCase();
        System.out.println(archName);

        String aol = null;

        if(osName.startsWith("mac"))
        {
            if(archName.startsWith("x86_64"))
            {
                aol = "x86_64-MacOSX-gpp";
            }
        }
        else if(osName.startsWith("windows"))
        {
            if(archName.startsWith("amd64"))
            {
                aol = "amd64-Windows-msvc";
            }
            else if(archName.startsWith("x86"))
            {
                aol = "x86-Windows-msvc";
            }
        }
        else if(osName.startsWith("linux"))
        {
            if(archName.startsWith("amd64"))
            {
                aol = "amd64-Linux-msvc";
            }
            else if(archName.startsWith("i386"))
            {
                aol = "i386-Linux-msvc";
            }
        }

        if(aol == null)
        {
            throw new IOException();
        }

        return aol;
    }

    public static String loadNative(String libName, String libPath)
    {
        // Native Directory check
        // TODO: We can change this to temporary file
//        File nativeDir = new File(prefix + "native");
//        // if the directory does not exist, create it
//        if (!nativeDir.exists())
//        {
//            nativeDir.mkdir();
//        }

        // Specify native path
        //String path = prefix + "native/" + libName;
        String path = null;
        try {
            InputStream in = ParaMaxFlowPanel.class.getResourceAsStream(libPath);

            File fileOut = File.createTempFile("lib", libName);
            path = fileOut.getAbsolutePath();
//            System.out.println("templib = " + tempo.getAbsolutePath());

//            File fileOut = new File(path);

            DataOutputStream writer = new DataOutputStream(new FileOutputStream(fileOut));

            long oneChar = 0;
            while((oneChar = in.read()) != -1){
                writer.write((int)oneChar);
            }

            in.close();
            writer.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }

        return path;
    }
}
